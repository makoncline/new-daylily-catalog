generator client {
  provider        = "prisma-client-js"
  output          = "./generated/sqlite-client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./db-dev.sqlite"
}

model AhsListing {
  id          String   @id @default(cuid())
  name        String?
  hybridizer  String?
  year        String?
  scapeHeight String?
  bloomSize   String?
  bloomSeason String?
  ploidy      String?
  foliageType String?
  bloomHabit  String?
  seedlingNum String?
  color       String?
  form        String?
  parentage   String?
  ahsImageUrl String?
  fragrance   String?
  budcount    String?
  branches    String?
  sculpting   String?
  foliage     String?
  flower      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lilies Listing[]
}

model Listing {
  id          String   @id @default(cuid())
  userId      String
  title       String
  slug        String
  price       Float?
  description String?
  privateNote String?
  ahsId       String?
  status      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images Image[]

  ahsListing AhsListing? @relation(fields: [ahsId], references: [id])
  lists      List[]      @relation("ListToListing")
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, slug])
  @@index([ahsId])
  @@index([userId])
  @@index([slug])
}

model List {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  status      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  listings    Listing[] @relation("ListToListing")
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  title       String?
  slug        String?  @unique
  logoUrl     String?
  description String?
  content     String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  images Image[]

  @@index([slug])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String?

  userProfileId String?
  listingId     String?

  userProfile UserProfile? @relation(fields: [userProfileId], references: [id])
  listing     Listing?     @relation(fields: [listingId], references: [id])

  @@index([userProfileId])
  @@index([listingId])
}

model User {
  id               String       @id @default(cuid())
  clerkUserId      String?      @unique
  stripeCustomerId String?      @unique
  role             String?      @default("USER")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  listings         Listing[]
  lists            List[]
  profile          UserProfile?
}

model KeyValue {
  key       String   @id
  value     String // Will store JSON stringified values
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
