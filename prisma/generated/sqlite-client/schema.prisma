generator client {
  provider = "prisma-client-js"
  output   = "./generated/sqlite-client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AhsListing {
  id          String   @id @default(cuid())
  name        String?
  hybridizer  String?
  year        String?
  scapeHeight String?
  bloomSize   String?
  bloomSeason String?
  ploidy      String?
  foliageType String?
  bloomHabit  String?
  seedlingNum String?
  color       String?
  form        String?
  parentage   String?
  ahsImageUrl String?
  fragrance   String?
  budcount    String?
  branches    String?
  sculpting   String?
  foliage     String?
  flower      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lilies Listing[]
}

model Listing {
  id          String   @id @default(cuid())
  userId      String
  name        String
  price       Float?
  publicNote  String?
  privateNote String?
  listId      String?
  ahsId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images Image[]

  ahsListing AhsListing? @relation(fields: [ahsId], references: [id])
  list       List?       @relation(fields: [listId], references: [id])
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([ahsId])
  @@index([listId])
  @@index([userId])
}

model List {
  id        String    @id @default(cuid())
  userId    String
  name      String
  intro     String?
  bio       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listings  Listing[]
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  logoUrl      String?
  intro        String?
  bio          String?
  userLocation String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  images Image[]
}

model Image {
  id        String   @id @default(cuid())
  url       String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfileId String?
  listingId     String?

  userProfile UserProfile? @relation(fields: [userProfileId], references: [id])
  listing     Listing?     @relation(fields: [listingId], references: [id])

  @@index([userProfileId])
  @@index([listingId])
}

model StripeCustomer {
  id                  String               @id
  userId              String               @unique
  email               String? // TODO: Make non-nullable after migration
  name                String? // TODO: Make non-nullable after migration
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSubscriptions StripeSubscription[]
}

model StripeSubscription {
  id                String         @id
  userId            String         @unique
  stripeCustomerId  String         @unique
  status            String? // TODO: Make non-nullable after migration
  priceId           String? // TODO: Make non-nullable after migration
  currentPeriodEnd  DateTime? // TODO: Make non-nullable after migration
  cancelAtPeriodEnd Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  customer          StripeCustomer @relation(fields: [stripeCustomerId], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  username           String              @unique
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  role               String?             @default("USER")
  verifiedAt         DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  freeUntil          DateTime?
  accounts           Account[]
  sessions           Session[]
  listings           Listing[]
  lists              List[]
  stripeCustomer     StripeCustomer?
  stripeSubscription StripeSubscription?
  profile            UserProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
