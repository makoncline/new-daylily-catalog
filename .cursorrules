# Project Instructions

- Use specification and guidelines as you build the app.
- Write the complete code for every step. Do not get lazy.
- Your goal is to completely finish whatever I ask for.
- You will see <ai_context> tags in the code. These are context tags that you should use to help you understand the codebase.

## Overview

A platform where daylily growers can build and manage their online presence. Connect with our database of 90,000+ registered cultivars to showcase and sell your daylilies.

## Core Features

- **Daylily Listings**: Create detailed entries with names, descriptions, prices, and notes
- **Database Integration**: Auto-populate listings with official cultivar data and photos
- **Photo Management**: Upload and manage photos for each listing
- **Lists**: Organize daylilies into lists (gardens, sales, favorites)
- **Garden Profile**: Share your story, contact info, images, and business details

Built to help daylily growers showcase their collections and grow their business online.

# Tech Stack

- Frontend: Next.js, Tailwind, shadcn/ui
- Backend: SQLite, Turso,Prisma, tRPC
- Auth: Clerk
- Payments: Stripe
- Deployment: Vercel
- Image storage: S3
- Image processing: Cloudflare

# Project Structure

- src/
  - app/ - Next.js app router
    - api/trpc/[trpc] - tRPC HTTP handler
    - (routes) - App routes
    - \_components - Route-specific components
  - components/ - Shared components
    - ui/ - shadcn/ui components only (no custom components)
    - forms/ - Form components
    - other-component.tsx
  - server/ - Server-side code
    - api/ - tRPC API
      - routers/ - tRPC routers (main business logic)
      - trpc.ts - tRPC initialization
    - db/ - Database utilities
  - hooks/ - Custom hooks
  - lib/ - Shared utilities
  - types/ - Type definitions
- prisma/ - Prisma schema and migrations
- public/ - Static assets
- tests/ - Test files
- prompts/ - Prompt files

## Rules

Follow these rules when building the app.

### General Rules

- Use `@` to import anything from the app unless otherwise specified
- Use kebab case for all files and folders unless otherwise specified
- Don't update shadcn components unless otherwise specified

#### Env Rules

- If you update environment variables, update the `.env.example` file
- All environment variables should go in `.env.development`
- Do not expose environment variables to the frontend
- Use `NEXT_PUBLIC_` prefix for environment variables that need to be accessed from the frontend
- You may import environment variables in server actions and components by using `import { env } from "@/env";` then `env.VARIABLE_NAME`

#### Type Rules

Follow these rules when working with types.

- When importing types, use `@/types`
- Name files like `example-types.ts`
- All types should go in `types`
- Make sure to export the types in `types/index.ts`
- Use `zod` to create schemas that will be used to validate data
- Create types for zod schemas using `z.infer<typeof schema>`
- Prefer interfaces over type aliases
- If referring to db types, use `"@prisma/client";` such as `Listing` from `prisma/schema.prisma`

An example of a type:

`types/actions-types.ts`

```ts
export type ActionState<T> =
  | { isSuccess: true; message: string; data: T }
  | { isSuccess: false; message: string; data?: never };
```

And exporting it:

`types/index.ts`

```ts
export * from "./actions-types";
```

An example of a zod schema:

`types/exampe-schemas.ts`

```ts
export const exampleSchema = z.object({
  name: z.string().min(1),
  description: z.string().min(1).optional(),
});

export type Example = z.infer<typeof exampleSchema>;
```

### Frontend Rules

Follow these rules when working on the frontend.

It uses Next.js, Tailwind, Shadcn, and Framer Motion.

#### General Rules

- Use `lucide-react` for icons

#### Components

- Use divs instead of other html tags unless otherwise specified
- Separate the main parts of a component's html with an extra blank line for visual spacing
- Always tag a component with either `use server` or `use client` at the top, including layouts and pages

##### Organization

- All components be named using kebab case like `example-component.tsx` unless otherwise specified
- Put components in `/_components` in the route if one-off components
- Put components in `/components` from the root if shared components

##### Data Fetching

- Fetch data in server components and pass the data down as props to client components.
- Use trpc procedures from `@/trpc/server` to mutate data.

##### Server Components

- Use `"use server"` at the top of the file.
- Implement Suspense for asynchronous data fetching to show loading states while data is being fetched.
- If no asynchronous logic is required for a given server component, you do not need to wrap the component in `<Suspense>`. You can simply return the final UI directly since there is no async boundary needed.
- If asynchronous fetching is required, you can use a `<Suspense>` boundary and a fallback to indicate a loading state while data is loading.
- Server components cannot be imported into client components. If you want to use a server component in a client component, you must pass the as props using the "children" prop

Example of a server layout:

```tsx
"use server";

export default async function ExampleServerLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return children;
}
```

Example of a server page (with async logic):

```tsx
"use server";

import { Suspense } from "react";
import { SomeAction } from "@/actions/some-actions";
import { SomeComponent } from "./_components/some-component";
import { SomeSkeleton } from "./_components/some-skeleton";

export default async function ExampleServerPage() {
  return (
    <Suspense fallback={<SomeSkeleton className="some-class" />}>
      <SomeComponentFetcher />
    </Suspense>
  );
}

async function SomeComponentFetcher() {
  const { data } = await SomeAction();
  return <SomeComponent className="some-class" initialData={data || []} />;
}
```

Example of a server page (no async logic required):

```tsx
"use server";

import { SomeClientComponent } from "./_components/some-client-component";

// In this case, no asynchronous work is being done, so no Suspense or fallback is required.
export async function ExampleServerPage() {
  return <SomeClientComponent initialData={[]} />;
}
```

Example of a server component:

```tsx
"use server";

interface ExampleServerComponentProps {
  // Your props here
}

export async function ExampleServerComponent({
  props,
}: ExampleServerComponentProps) {
  // Your code here
}
```

##### Client Components

- Use `"use client"` at the top of the file
- Client components can safely rely on props passed down from server components, or handle UI interactions without needing <Suspense> if thereâ€™s no async logic.

Example of a client page:

```tsx
"use client";

export default function ExampleClientPage() {
  // Your code here
}
```

Example of a client component:

```tsx
"use client";

interface ExampleClientComponentProps {
  initialData: any[];
}

export default function ExampleClientComponent({
  initialData,
}: ExampleClientComponentProps) {
  // Client-side logic here
  return <div>{initialData.length} items</div>;
}
```

### Backend Rules

Follow these rules when working on the backend.

It uses Sqlite, Truso, Prisma, and tRPC.

#### General Rules

- Never generate migrations. You do not have to do anything in the `prisma/migrations` folder inluding migrations and metadata. Ignore it.

#### Organization

#### Schemas

- When importing database schemas, use `@prisma/client`
- If using a userId, always use `user.id` not the clerk user id from `auth()`
- Always include createdAt and updatedAt columns in all tables
- Make sure to cascade delete when necessary

#### Server Procedures

- When importing server procedures, use `@/trpc/server`
- When importing client procedures, use `@/trpc/react`
- procedure should go in the `server/api/routers` folder organized by domain
- Only write the needed procedure
- Sort in CRUD order: Create, Read, Update, Delete
- Make sure to return undefined as the data type if the procedure is not supposed to return any data

Example of a router and procedure:

```ts
// reusable include object
const exampleInclude = {
  id: true,
  name: true,
  createdAt: true,
  updatedAt: true,
};

export const exampleRouter = createTRPCRouter({
  update: protectedProcedure
    .input(
      z.object({
        id: z.string().min(1),
        name: z.string().min(1),
      }),
    )
    .mutation(async ({ input }) => {
      try {
        const result = await db.example.update({
          where: { id: input.id },
          data: {
            name: input.name,
          },
          include: exampleInclude,
        });

        revalidatePath("/example");

        return result;
      } catch (error) {
        console.error("Error updating example", error);
        throw new TRPCError({
          code: "INTERNAL_SERVER_ERROR",
          message: "Error updating example",
        });
      }
    }),
});
```

you can derive the router's input and output types like this:

```ts
export type ExampleRouter = typeof exampleRouter;

export type ExampleRouterOutput = inferRouterOutputs<ExampleRouter>;
export type ExampleRouterInput = inferRouterInputs<ExampleRouter>;

export type ExampleRouterUpdateOutput = ExampleRouterOutput["update"];
export type ExampleRouterUpdateInput = ExampleRouterInput["update"];
```

### Auth Rules

Follow these rules when working on auth.

It uses Clerk for authentication.

#### General Rules

- Import the auth helper with `import { auth } from "@clerk/nextjs/server"` in server components
- await the auth helper in server actions

### Payments Rules

Follow these rules when working on payments.

It uses Stripe for payments.
